rails
has migrations

migrations = updates the DB schema
rails g migration <describe ur migration>

rake db:migrate = to run migration
rake db:rollback = to rollback a migration

check your schema.rb = if migration is correct. dapat mag reflect sa schema.rb

table should ALWAYS be plural and snake_case
always add timestamps <--kasi auto naman siya and additional logging

RAILS has models

MODELS are used to associate tables to ruby classes
ACTIVERECORD = ORM ni ruby = ORM Object Relational Mapping

MODEL file name should be SINGULAR, NO CAPS, SNAKE_CASE
ALWAYS EXTEND TO ApplicationRecord eg. class User < ApplicationRecord 
WHY? to discuss LATER.

RAILS HAS many ways to build your associations.
BUT only use 3
belongs_to, has_many, has_one

belongs_to, has_one ALWAYS receive singular parameter
ex. 
belongs_to :user
has_one :status

has_many recieves PLURAL parameter
ex.
has_many :tasks


< = is equal to extends

ActiveRecord::Base = "CORE ORM"




rails c
or rails console

ACTIVERECORD manipulations BASIC

GETTING ACTIVERECORD DATA

user= User.first <--get ung first user
users = User.all <--returns an array of users
user = User.where(first_name: "RD") <--returns a user with name RD
user= User.find(1)
user = User.find_by(first_name:"RD")

# WHERE always returns an array kahit isa lang
# FIND_BY returns the first item

CREATING ACTIVERECORD DATA

user = User.create(first_name: "Laurice")
user= User.create(first_name: "Crystal", email: "crystal@test.com")

TaskParticipant.create(user: User.first, task: Task.first, role: Role.first)

TaskParticipant.create(user_id: 3, task_id: 1, role_id: 1)

UPDATING ACTIVERECORD DATA

user = User.find(1)
user.first_name = "Hardey"
user.email = "hardey@test.com"
user.save

user.update(first_name: "RD", email: "test@test.com")

DESTROY

user= User.find(1)
user.destroy

---------

RELATIONSHIPS

reload! to restart console

User.tasks(1)


CREATE WITH RELATIONSHIPS

task.task_comments.create(body: "MY FIRST COMMENT", user_id: 1)
user.task_comments.create(body: "ERER", task_id: 1)

self. = CLASS METHOD
without self= instance method

validates
  presence
  uniquness
  at format


CUSTOM VALIDATION


  validate :check_user_participant

  def check_user_participant
    if user.task_participants.where(task_id: self.task_id).blank?
      errors.add(:base, "User does not belong to this task")
    end
  end

users
id <--primary key, ito ung nag auto


kapag belongs to, ibg sabihin nasakin ung foreign key.





REST API 

*HINDI SPECIFIC TO SA JSON
*HINDI SPECIFIC TO SA API/

*REST = given a location.
HTTP VERBS 

GET,POST,PATCH/PUT,DELETE


GET = for getting data
POST = is for INSERTING DATA
PATCH/PUT = is for updating data
DELETE = is for deleting data


GET api/tasks <--returns all tasks
GET api/tasks/:id <--returns detail for a task
POST api/tasks <--create a new task
PATCH/PUT api/tasks <--update a new task
DELTE api/tasks/:id <--DELETE A TASK


*
routes.rb <--anything na naka define kay routes, accessible as URL
controller


params <--special varriable para makuha yung ANY details sa request.


Exceptions

pag meron kang method, automatic BEGIN na un
no need to define BEGIN
sa dulo ng method moilagay ung exception

.to_s = to string
.to_i
.to_f